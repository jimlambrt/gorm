# use the default golang container from Docker Hub
box: golang

services:
  - name: mariadb
    id: mariadb:latest
    env:
      MYSQL_DATABASE: gorm
      MYSQL_USER: gorm
      MYSQL_PASSWORD: gorm
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  - name: mysql
    id: mysql:latest
    env:
      MYSQL_DATABASE: gorm
      MYSQL_USER: gorm
      MYSQL_PASSWORD: gorm
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  - name: mysql57
    id: mysql:5.7
    env:
      MYSQL_DATABASE: gorm
      MYSQL_USER: gorm
      MYSQL_PASSWORD: gorm
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  - name: mysql56
    id: mysql:5.6
    env:
      MYSQL_DATABASE: gorm
      MYSQL_USER: gorm
      MYSQL_PASSWORD: gorm
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  - name: postgres
    id: postgres:latest
    env:
      POSTGRES_USER: gorm
      POSTGRES_PASSWORD: gorm
      POSTGRES_DB: gorm
  - name: postgres96
    id: postgres:9.6
    env:
      POSTGRES_USER: gorm
      POSTGRES_PASSWORD: gorm
      POSTGRES_DB: gorm
  - name: postgres95
    id: postgres:9.5
    env:
      POSTGRES_USER: gorm
      POSTGRES_PASSWORD: gorm
      POSTGRES_DB: gorm
  - name: postgres94
    id: postgres:9.4
    env:
      POSTGRES_USER: gorm
      POSTGRES_PASSWORD: gorm
      POSTGRES_DB: gorm
  - name: postgres93
    id: postgres:9.3
    env:
      POSTGRES_USER: gorm
      POSTGRES_PASSWORD: gorm
      POSTGRES_DB: gorm
  - name: mssql
    id: mcmoe/mssqldocker:latest
    env:
      ACCEPT_EULA: Y
      SA_PASSWORD: LoremIpsum86
      MSSQL_DB: gorm
      MSSQL_USER: gorm
      MSSQL_PASSWORD: LoremIpsum86
  - name: oracle
    id: jimlambrt/gorm-ora:latest

# The steps that will be executed in the build pipeline
build:
  # The steps that will be executed on build
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    - script:
        name: install-oci-pkgs
        code: |
          sudo apt-get update
          sudo apt-get -y install pkg-config gcc wget alien libaio1 libaio-dev unzip netcat

    - script:
        name: install-instantclients
        code: |
          cd $WERCKER_SOURCE_DIR/dialects/oci8/contrib
          unzip instaclients.zip
          alien -i oracle-instantclient19.6-basic-19.6.0.0.0-1.x86_64.rpm
          alien -i oracle-instantclient19.6-sqlplus-19.6.0.0.0-1.x86_64.rpm
          alien -i oracle-instantclient19.6-devel-19.6.0.0.0-1.x86_64.rpm

    - script:
        name: create-oci8-pkg-config
        code: |
          echo "creating oci8.pc"
          mkdir -p /usr/local/pkg_config
          cd /usr/local/pkg_config
          export ORACLE_LIB=/usr/lib/oracle/19.6/client64
          export ORACLE_INC=/usr/include/oracle/19.6/client64
          export PKG_CONFIG_PATH=/usr/local/pkg_config
          cat > oci8.pc <<PKGCONFIG
          Name: oci8
          Description: Oracle Call Interface
          Version: 19.6
          Cflags: -I${ORACLE_INC}
          Libs: -L${ORACLE_LIB}/lib -Wl,-rpath,${ORACLE_LIB}/lib -lclntsh
          PKGCONFIG

    # Gets the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -t -v ./...

    # Build the project
    - script:
        name: go build
        code: |
          go build ./...

    # Test the project
    - script:
        name: test sqlite
        code: |
          go test -race -v ./...

    - script:
        name: test mariadb
        code: |
          GORM_DIALECT=mysql GORM_DSN="gorm:gorm@tcp(mariadb:3306)/gorm?charset=utf8&parseTime=True" go test -race ./...

    - script:
        name: test mysql
        code: |
          GORM_DIALECT=mysql GORM_DSN="gorm:gorm@tcp(mysql:3306)/gorm?charset=utf8&parseTime=True" go test -race ./...

    - script:
        name: test mysql5.7
        code: |
          GORM_DIALECT=mysql GORM_DSN="gorm:gorm@tcp(mysql57:3306)/gorm?charset=utf8&parseTime=True" go test -race ./...

    - script:
        name: test mysql5.6
        code: |
          GORM_DIALECT=mysql GORM_DSN="gorm:gorm@tcp(mysql56:3306)/gorm?charset=utf8&parseTime=True" go test -race ./...

    - script:
        name: test postgres
        code: |
          GORM_DIALECT=postgres GORM_DSN="host=postgres user=gorm password=gorm DB.name=gorm port=5432 sslmode=disable" go test -race ./...

    - script:
        name: test postgres96
        code: |
          GORM_DIALECT=postgres GORM_DSN="host=postgres96 user=gorm password=gorm DB.name=gorm port=5432 sslmode=disable" go test -race ./...

    - script:
        name: test postgres95
        code: |
          GORM_DIALECT=postgres GORM_DSN="host=postgres95 user=gorm password=gorm DB.name=gorm port=5432 sslmode=disable" go test -race ./...

    - script:
        name: test postgres94
        code: |
          GORM_DIALECT=postgres GORM_DSN="host=postgres94 user=gorm password=gorm DB.name=gorm port=5432 sslmode=disable" go test -race ./...

    - script:
        name: test postgres93
        code: |
          GORM_DIALECT=postgres GORM_DSN="host=postgres93 user=gorm password=gorm DB.name=gorm port=5432 sslmode=disable" go test -race ./...

    - script:
        name: test mssql
        code: |
          GORM_DIALECT=mssql GORM_DSN="sqlserver://gorm:LoremIpsum86@mssql:1433?database=gorm" go test -race ./...

    - script:
        name: test oracle
        code: |
          go run $WERCKER_SOURCE_DIR/dialects/oci8/contrib/connection.go
          GORM_DIALECT=oci8 GORM_DSN="gorm/gorm@oracle:1521/XEPDB1" go test -race ./...

    - script:
        name: codecov
        code: |
          go get github.com/wadey/gocovmerge
          go test -race -coverprofile=coverage1.txt -covermode=atomic ./...
          GORM_DIALECT=oci8 GORM_DSN="gorm/gorm@oracle:1521/XEPDB1" go test -race -coverprofile=coverage2.txt -covermode=atomic ./...
          gocovmerge coverage1.txt coverage2.txt > coverage.txt
          bash <(curl -s https://codecov.io/bash)
